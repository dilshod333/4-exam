// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: device.proto

package gendevice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DeviceServer_CreateDevice_FullMethodName = "/DeviceServer/CreateDevice"
	DeviceServer_UpdateDevice_FullMethodName = "/DeviceServer/UpdateDevice"
	DeviceServer_DeleteById_FullMethodName   = "/DeviceServer/DeleteById"
	DeviceServer_Create_FullMethodName       = "/DeviceServer/Create"
)

// DeviceServerClient is the client API for DeviceServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServerClient interface {
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResp, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResp, error)
	DeleteById(ctx context.Context, in *DeleteDeviceReq, opts ...grpc.CallOption) (*DeleteResp, error)
	Create(ctx context.Context, in *DeviceControlReq, opts ...grpc.CallOption) (*DeviceControlResp, error)
}

type deviceServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServerClient(cc grpc.ClientConnInterface) DeviceServerClient {
	return &deviceServerClient{cc}
}

func (c *deviceServerClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeviceResp)
	err := c.cc.Invoke(ctx, DeviceServer_CreateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeviceResp)
	err := c.cc.Invoke(ctx, DeviceServer_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) DeleteById(ctx context.Context, in *DeleteDeviceReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, DeviceServer_DeleteById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServerClient) Create(ctx context.Context, in *DeviceControlReq, opts ...grpc.CallOption) (*DeviceControlResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceControlResp)
	err := c.cc.Invoke(ctx, DeviceServer_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServerServer is the server API for DeviceServer service.
// All implementations must embed UnimplementedDeviceServerServer
// for forward compatibility
type DeviceServerServer interface {
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResp, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResp, error)
	DeleteById(context.Context, *DeleteDeviceReq) (*DeleteResp, error)
	Create(context.Context, *DeviceControlReq) (*DeviceControlResp, error)
	mustEmbedUnimplementedDeviceServerServer()
}

// UnimplementedDeviceServerServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServerServer struct {
}

func (UnimplementedDeviceServerServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDeviceServerServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedDeviceServerServer) DeleteById(context.Context, *DeleteDeviceReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (UnimplementedDeviceServerServer) Create(context.Context, *DeviceControlReq) (*DeviceControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeviceServerServer) mustEmbedUnimplementedDeviceServerServer() {}

// UnsafeDeviceServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServerServer will
// result in compilation errors.
type UnsafeDeviceServerServer interface {
	mustEmbedUnimplementedDeviceServerServer()
}

func RegisterDeviceServerServer(s grpc.ServiceRegistrar, srv DeviceServerServer) {
	s.RegisterService(&DeviceServer_ServiceDesc, srv)
}

func _DeviceServer_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceServer_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceServer_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceServer_DeleteById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).DeleteById(ctx, req.(*DeleteDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceServer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceServer_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServerServer).Create(ctx, req.(*DeviceControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceServer_ServiceDesc is the grpc.ServiceDesc for DeviceServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeviceServer",
	HandlerType: (*DeviceServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceServer_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _DeviceServer_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _DeviceServer_DeleteById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DeviceServer_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}
